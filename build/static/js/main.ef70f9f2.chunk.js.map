{"version":3,"sources":["styles.module.css","LocationSearch/styles.module.css","weather/WeatherDay.js","const.js","LocationSearch/LocationSearch.js","App.js","index.js"],"names":["module","exports","main","day","container","header","WeatherDay","_ref","min","max","weatherType","weatherKey","dayOfWeek","react_default","a","createElement","className","styles","src","concat","alt","API_KEY","LocationSearch","onCityFound","_useState","useState","_useState2","Object","slicedToArray","zipcode","setZipcode","Fragment","placeholder","value","onChange","e","target","onClick","zip","url","fetch","then","res","json","find","l","Country","ID","name","SupplementalAdminAreas","LocalizedName","key","Key","state","AdministrativeArea","getLocation","App","weatherInfo","setWeatherInfo","_useState3","_useState4","locationKey","setLocationKey","_useState5","_useState6","location","setLocation","padnum","num","stringNum","length","apikey","useEffect","daysOfWeek","DailyForecasts","map","df","Temperature","Minimum","Value","Maximum","Day","IconPhrase","Icon","Date","getDay","LocationSearch_LocationSearch","cityInfo","i","index","weather_WeatherDay","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ef70f9f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3Oq9O\",\"day\":\"styles_day__1m2sg\",\"container\":\"styles_container__9rT8B\",\"header\":\"styles_header__1depf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__371bf\"};","import React from 'react'\r\nimport styles from '../styles.module.css'\r\n\r\nfunction WeatherDay({min, max, weatherType, weatherKey, dayOfWeek }) {\r\n\r\n    return(\r\n        <div className='card text-white bg-dark m-3'>\r\n           \r\n            <div className={styles.day}> \r\n            <div className='text-center m-1'> {dayOfWeek}</div>\r\n           \r\n    <img src ={ `https://developer.accuweather.com/sites/default/files/${weatherKey}-s.png`} alt={weatherType} /> \r\n    <div className='m-1'></div>\r\n    Temp :{min} / {max} \r\n                </div>\r\n                <p>Humidity ‚õÖ</p>\r\n                <p> Wind-Speed üçÉ</p>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherDay","export const API_KEY = 'ORBHUdJyZAZmfA29pH32Psj61HmdRdKA';","import React,{ useState } from \"react\"\r\nimport { API_KEY } from \"../const\";\r\nimport styles from \"./styles.module.css\"\r\n\r\n\r\nfunction LocationSearch({ onCityFound }) {\r\n\r\n    const [zipcode, setZipcode] = useState('');\r\n\r\n    const getLocation = (zip) => {\r\n        const url = `https://dataservice.accuweather.com/locations/v1/postalcodes/search?apikey=${API_KEY}&q=${zip}`\r\n        fetch(url).then(res => res.json())\r\n            .then(res => res.find(l => l.Country.ID === \"IN\"))\r\n            .then(res => onCityFound({\r\n                name: res.SupplementalAdminAreas[0].LocalizedName,\r\n                key: res.Key,\r\n                state: res.AdministrativeArea.ID\r\n            }))\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n  <div className=\"row\">\r\n     <h1>‚õÖForecast</h1>\r\n        </div>\r\n        <div className={styles.main}>\r\n           \r\n            <input\r\n            placeholder=\"zipcode\"\r\n            className=\"form-control\"\r\n                value={zipcode}\r\n                onChange={e => setZipcode(e.target.value)}\r\n            />\r\n            <button \r\n            className=\"btn btn-outline-light\"\r\n            onClick={e => getLocation(zipcode)}>Search</button>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default LocationSearch","import './App.css';\nimport React,{ useEffect, useState } from 'react';\nimport WeatherDay from '../src/weather/WeatherDay';\nimport styles from \"./styles.module.css\"\nimport {API_KEY} from './const'\nimport LocationSearch from './LocationSearch/LocationSearch';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [weatherInfo, setWeatherInfo] = useState();\n  const [locationKey, setLocationKey] = useState();\n  const [location, setLocation] = useState('');\n\n \n  \n\n  const padnum = (num) => {\n    const stringNum = num + '';\n    const stringLen = stringNum.length;\n    if(stringLen === 1) {\n      return '0' + stringNum;  \n    }else {\n      return stringNum;\n    }\n  }\n  const apikey = API_KEY;\n\n  useEffect(() => {\n    const daysOfWeek = [\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday','Thursday','Friday','Saturday'\n    ]\n\n    if (locationKey) {\n      fetch(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/locationKey=${locationKey}?apikey=${apikey}`)\n      .then(res => res.json())\n      .then(res => \n        setWeatherInfo(res.DailyForecasts.map(df => {\n        return {\n          min: df.Temperature.Minimum.Value,\n          max: df.Temperature.Maximum.Value,\n          weatherType: df.Day.IconPhrase,\n          weatherKey: padnum(df.Day.Icon),\n          dayOfWeek: daysOfWeek[new Date(df.Date).getDay()],\n\n        }\n      })))\n    }\n  \n  }, [locationKey, apikey])\n\n  // useEffect(()=> {\n  //   console.log(weatherInfo);\n  // }, [weatherInfo])\n\n  return (\n    <div className={styles.container}>\n      <div>\n  <LocationSearch \n  onCityFound={cityInfo => {\n   setLocationKey(cityInfo.key)\n   setLocation(cityInfo.name + ', ' + cityInfo.state )\n  }}/>\n<div className={styles.header}>\n<h1 className='text-muted'>{location}</h1> \n</div>\n\n    <div className={styles.main}>\n     \n      {\n        !!weatherInfo && weatherInfo.map((i, index) => (\n          <div key={index}>\n            <WeatherDay \n            min={i.min} \n            max={i.max} \n            weatherType={i.weatherType} \n            weatherKey={i.weatherKey}\n            dayOfWeek = {i.dayOfWeek} />\n          </div>\n        ))\n      }\n    </div>\n    </div>\n    </div>\n  \n  );\n}\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}